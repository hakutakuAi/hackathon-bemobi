/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface ParquetColumnarStorage2
 */
export interface ParquetColumnarStorage2 {
    /**
     * 
     * @type {string}
     * @memberof ParquetColumnarStorage2
     */
    'format_type': ParquetColumnarStorage2FormatTypeEnum;
    /**
     * The compression algorithm used to compress data pages.
     * @type {string}
     * @memberof ParquetColumnarStorage2
     */
    'compression_codec'?: ParquetColumnarStorage2CompressionCodecEnum;
    /**
     * This is the size of a row group being buffered in memory. It limits the memory usage when writing. Larger values will improve the IO when reading, but consume more memory when writing. Default: 128 MB.
     * @type {number}
     * @memberof ParquetColumnarStorage2
     */
    'block_size_mb'?: number;
    /**
     * Maximum size allowed as padding to align row groups. This is also the minimum size of a row group. Default: 8 MB.
     * @type {number}
     * @memberof ParquetColumnarStorage2
     */
    'max_padding_size_mb'?: number;
    /**
     * The page size is for compression. A block is composed of pages. A page is the smallest unit that must be read fully to access a single record. If this value is too small, the compression will deteriorate. Default: 1024 KB.
     * @type {number}
     * @memberof ParquetColumnarStorage2
     */
    'page_size_kb'?: number;
    /**
     * There is one dictionary page per column per row group when dictionary encoding is used. The dictionary page size works like the page size but for dictionary. Default: 1024 KB.
     * @type {number}
     * @memberof ParquetColumnarStorage2
     */
    'dictionary_page_size_kb'?: number;
    /**
     * Default: true.
     * @type {boolean}
     * @memberof ParquetColumnarStorage2
     */
    'dictionary_encoding'?: boolean;
}

export const ParquetColumnarStorage2FormatTypeEnum = {
    PARQUET: 'Parquet'
} as const;

export type ParquetColumnarStorage2FormatTypeEnum = typeof ParquetColumnarStorage2FormatTypeEnum[keyof typeof ParquetColumnarStorage2FormatTypeEnum];
export const ParquetColumnarStorage2CompressionCodecEnum = {
    UNCOMPRESSED: 'UNCOMPRESSED',
    SNAPPY: 'SNAPPY',
    GZIP: 'GZIP',
    LZO: 'LZO',
    BROTLI: 'BROTLI',
    LZ4: 'LZ4',
    ZSTD: 'ZSTD'
} as const;

export type ParquetColumnarStorage2CompressionCodecEnum = typeof ParquetColumnarStorage2CompressionCodecEnum[keyof typeof ParquetColumnarStorage2CompressionCodecEnum];


