/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { CSVHeaderDefinition } from './csvheader-definition';

/**
 * 
 * @export
 * @interface CSVFormat
 */
export interface CSVFormat {
    /**
     * 
     * @type {string}
     * @memberof CSVFormat
     */
    'filetype': CSVFormatFiletypeEnum;
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter \'\\t\'.
     * @type {string}
     * @memberof CSVFormat
     */
    'delimiter'?: string;
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank.
     * @type {string}
     * @memberof CSVFormat
     */
    'quote_char'?: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     * @type {string}
     * @memberof CSVFormat
     */
    'escape_char'?: string;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\" target=\"_blank\">list of python encodings</a> for allowable options.
     * @type {string}
     * @memberof CSVFormat
     */
    'encoding'?: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data.
     * @type {boolean}
     * @memberof CSVFormat
     */
    'double_quote'?: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value \'NA\' should be interpreted as null, enter \'NA\' in this field.
     * @type {Set<string>}
     * @memberof CSVFormat
     */
    'null_values'?: Set<string>;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.
     * @type {boolean}
     * @memberof CSVFormat
     */
    'strings_can_be_null'?: boolean;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.
     * @type {number}
     * @memberof CSVFormat
     */
    'skip_rows_before_header'?: number;
    /**
     * The number of rows to skip after the header row.
     * @type {number}
     * @memberof CSVFormat
     */
    'skip_rows_after_header'?: number;
    /**
     * 
     * @type {CSVHeaderDefinition}
     * @memberof CSVFormat
     */
    'header_definition'?: CSVHeaderDefinition;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     * @type {Set<string>}
     * @memberof CSVFormat
     */
    'true_values'?: Set<string>;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     * @type {Set<string>}
     * @memberof CSVFormat
     */
    'false_values'?: Set<string>;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema.
     * @type {boolean}
     * @memberof CSVFormat
     */
    'ignore_errors_on_fields_mismatch'?: boolean;
}

export const CSVFormatFiletypeEnum = {
    CSV: 'csv'
} as const;

export type CSVFormatFiletypeEnum = typeof CSVFormatFiletypeEnum[keyof typeof CSVFormatFiletypeEnum];


