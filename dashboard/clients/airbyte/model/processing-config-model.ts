/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { FieldNameMappingConfigModel } from './field-name-mapping-config-model';
// May contain unused imports in some cases
// @ts-ignore
import type { TextSplitter } from './text-splitter';

/**
 * 
 * @export
 * @interface ProcessingConfigModel
 */
export interface ProcessingConfigModel {
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     * @type {number}
     * @memberof ProcessingConfigModel
     */
    'chunk_size': number;
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context
     * @type {number}
     * @memberof ProcessingConfigModel
     */
    'chunk_overlap'?: number;
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It\'s also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     * @type {Array<string>}
     * @memberof ProcessingConfigModel
     */
    'text_fields'?: Array<string>;
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It\'s also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     * @type {Array<string>}
     * @memberof ProcessingConfigModel
     */
    'metadata_fields'?: Array<string>;
    /**
     * 
     * @type {TextSplitter}
     * @memberof ProcessingConfigModel
     */
    'text_splitter'?: TextSplitter;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     * @type {Array<FieldNameMappingConfigModel>}
     * @memberof ProcessingConfigModel
     */
    'field_name_mappings'?: Array<FieldNameMappingConfigModel>;
}

