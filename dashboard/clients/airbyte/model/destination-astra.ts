/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { Embedding2 } from './embedding2';
// May contain unused imports in some cases
// @ts-ignore
import type { Indexing6 } from './indexing6';
// May contain unused imports in some cases
// @ts-ignore
import type { ProcessingConfigModel } from './processing-config-model';

/**
 * The configuration model for the Vector DB based destinations. This model is used to generate the UI for the destination configuration, as well as to provide type safety for the configuration passed to the destination.  The configuration model is composed of four parts: * Processing configuration * Embedding configuration * Indexing configuration * Advanced configuration  Processing, embedding and advanced configuration are provided by this base class, while the indexing configuration is provided by the destination connector in the sub class.
 * @export
 * @interface DestinationAstra
 */
export interface DestinationAstra {
    /**
     * 
     * @type {Embedding2}
     * @memberof DestinationAstra
     */
    'embedding': Embedding2;
    /**
     * 
     * @type {ProcessingConfigModel}
     * @memberof DestinationAstra
     */
    'processing': ProcessingConfigModel;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source.
     * @type {boolean}
     * @memberof DestinationAstra
     */
    'omit_raw_text'?: boolean;
    /**
     * 
     * @type {Indexing6}
     * @memberof DestinationAstra
     */
    'indexing': Indexing6;
    /**
     * 
     * @type {string}
     * @memberof DestinationAstra
     */
    'destinationType': DestinationAstraDestinationTypeEnum;
}

export const DestinationAstraDestinationTypeEnum = {
    ASTRA: 'astra'
} as const;

export type DestinationAstraDestinationTypeEnum = typeof DestinationAstraDestinationTypeEnum[keyof typeof DestinationAstraDestinationTypeEnum];


