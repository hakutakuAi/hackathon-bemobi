/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { OAuth20Credentials1 } from './oauth20-credentials1';

/**
 * Configuration to connect to the Vectara instance
 * @export
 * @interface DestinationVectaraUpdate
 */
export interface DestinationVectaraUpdate {
    /**
     * 
     * @type {OAuth20Credentials1}
     * @memberof DestinationVectaraUpdate
     */
    'oauth2': OAuth20Credentials1;
    /**
     * Your customer id as it is in the authenticaion url
     * @type {string}
     * @memberof DestinationVectaraUpdate
     */
    'customer_id': string;
    /**
     * The Name of Corpus to load data into
     * @type {string}
     * @memberof DestinationVectaraUpdate
     */
    'corpus_name': string;
    /**
     * Parallelize indexing into Vectara with multiple threads
     * @type {boolean}
     * @memberof DestinationVectaraUpdate
     */
    'parallelize'?: boolean;
    /**
     * List of fields in the record that should be in the section of the document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It\'s also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     * @type {Array<string>}
     * @memberof DestinationVectaraUpdate
     */
    'text_fields'?: Array<string>;
    /**
     * A field that will be used to populate the `title` of each document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It\'s also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     * @type {string}
     * @memberof DestinationVectaraUpdate
     */
    'title_field'?: string;
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It\'s also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     * @type {Array<string>}
     * @memberof DestinationVectaraUpdate
     */
    'metadata_fields'?: Array<string>;
}

