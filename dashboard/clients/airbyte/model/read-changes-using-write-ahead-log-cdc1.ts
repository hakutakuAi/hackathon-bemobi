/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using the Postgres <a href=\"https://docs.airbyte.com/integrations/sources/postgres/#cdc\">write-ahead log (WAL)</a>. This needs to be configured on the source database itself. Recommended for tables of any size.
 * @export
 * @interface ReadChangesUsingWriteAheadLogCDC1
 */
export interface ReadChangesUsingWriteAheadLogCDC1 {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'method': ReadChangesUsingWriteAheadLogCDC1MethodEnum;
    /**
     * A logical decoding plugin installed on the PostgreSQL server.
     * @type {string}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'plugin'?: ReadChangesUsingWriteAheadLogCDC1PluginEnum;
    /**
     * A plugin logical replication slot. Read about <a href=\"https://docs.airbyte.com/integrations/sources/postgres#step-3-create-replication-slot\">replication slots</a>.
     * @type {string}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'replication_slot': string;
    /**
     * A Postgres publication used for consuming changes. Read about <a href=\"https://docs.airbyte.com/integrations/sources/postgres#step-4-create-publications-and-replication-identities-for-tables\">publications and replication identities</a>.
     * @type {string}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'publication': string;
    /**
     * The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 1200 seconds. Valid range: 120 seconds to 2400 seconds. Read about <a href=\"https://docs.airbyte.com/integrations/sources/postgres/postgres-troubleshooting#advanced-setting-up-initial-cdc-waiting-time\">initial waiting time</a>.
     * @type {number}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'initial_waiting_seconds'?: number;
    /**
     * The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful.
     * @type {number}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'queue_size'?: number;
    /**
     * Determines when Airbyte should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync.
     * @type {string}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'lsn_commit_behaviour'?: ReadChangesUsingWriteAheadLogCDC1LsnCommitBehaviourEnum;
    /**
     * Specifies a query that the connector executes on the source database when the connector sends a heartbeat message. Please see the <a href=\"https://docs.airbyte.com/integrations/sources/postgres/postgres-troubleshooting#advanced-wal-disk-consumption-and-heartbeat-action-query\">setup guide</a> for how and when to configure this setting.
     * @type {string}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'heartbeat_action_query'?: string;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If \'Fail sync\' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If \'Re-sync data\' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     * @type {string}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'invalid_cdc_cursor_position_behavior'?: ReadChangesUsingWriteAheadLogCDC1InvalidCdcCursorPositionBehaviorEnum;
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
     * @type {number}
     * @memberof ReadChangesUsingWriteAheadLogCDC1
     */
    'initial_load_timeout_hours'?: number;
}

export const ReadChangesUsingWriteAheadLogCDC1MethodEnum = {
    CDC: 'CDC'
} as const;

export type ReadChangesUsingWriteAheadLogCDC1MethodEnum = typeof ReadChangesUsingWriteAheadLogCDC1MethodEnum[keyof typeof ReadChangesUsingWriteAheadLogCDC1MethodEnum];
export const ReadChangesUsingWriteAheadLogCDC1PluginEnum = {
    PGOUTPUT: 'pgoutput'
} as const;

export type ReadChangesUsingWriteAheadLogCDC1PluginEnum = typeof ReadChangesUsingWriteAheadLogCDC1PluginEnum[keyof typeof ReadChangesUsingWriteAheadLogCDC1PluginEnum];
export const ReadChangesUsingWriteAheadLogCDC1LsnCommitBehaviourEnum = {
    WHILE_READING_DATA: 'While reading Data',
    AFTER_LOADING_DATA_IN_THE_DESTINATION: 'After loading Data in the destination'
} as const;

export type ReadChangesUsingWriteAheadLogCDC1LsnCommitBehaviourEnum = typeof ReadChangesUsingWriteAheadLogCDC1LsnCommitBehaviourEnum[keyof typeof ReadChangesUsingWriteAheadLogCDC1LsnCommitBehaviourEnum];
export const ReadChangesUsingWriteAheadLogCDC1InvalidCdcCursorPositionBehaviorEnum = {
    FAIL_SYNC: 'Fail sync',
    RE_SYNC_DATA: 'Re-sync data'
} as const;

export type ReadChangesUsingWriteAheadLogCDC1InvalidCdcCursorPositionBehaviorEnum = typeof ReadChangesUsingWriteAheadLogCDC1InvalidCdcCursorPositionBehaviorEnum[keyof typeof ReadChangesUsingWriteAheadLogCDC1InvalidCdcCursorPositionBehaviorEnum];


