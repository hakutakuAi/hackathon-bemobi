/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using the MySQL <a href=\"https://docs.airbyte.com/integrations/sources/mysql/#change-data-capture-cdc\">binary log</a>. This must be enabled on your database.
 * @export
 * @interface ReadChangesUsingBinaryLogCDC
 */
export interface ReadChangesUsingBinaryLogCDC {
    /**
     * 
     * @type {string}
     * @memberof ReadChangesUsingBinaryLogCDC
     */
    'method': ReadChangesUsingBinaryLogCDCMethodEnum;
    /**
     * The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 1200 seconds. Read about <a href=\"https://docs.airbyte.com/integrations/sources/mysql/#change-data-capture-cdc\">initial waiting time</a>.
     * @type {number}
     * @memberof ReadChangesUsingBinaryLogCDC
     */
    'initial_waiting_seconds'?: number;
    /**
     * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
     * @type {string}
     * @memberof ReadChangesUsingBinaryLogCDC
     */
    'server_time_zone'?: string;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If \'Fail sync\' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If \'Re-sync data\' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
     * @type {string}
     * @memberof ReadChangesUsingBinaryLogCDC
     */
    'invalid_cdc_cursor_position_behavior'?: ReadChangesUsingBinaryLogCDCInvalidCdcCursorPositionBehaviorEnum;
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs.
     * @type {number}
     * @memberof ReadChangesUsingBinaryLogCDC
     */
    'initial_load_timeout_hours'?: number;
}

export const ReadChangesUsingBinaryLogCDCMethodEnum = {
    CDC: 'CDC'
} as const;

export type ReadChangesUsingBinaryLogCDCMethodEnum = typeof ReadChangesUsingBinaryLogCDCMethodEnum[keyof typeof ReadChangesUsingBinaryLogCDCMethodEnum];
export const ReadChangesUsingBinaryLogCDCInvalidCdcCursorPositionBehaviorEnum = {
    FAIL_SYNC: 'Fail sync',
    RE_SYNC_DATA: 'Re-sync data'
} as const;

export type ReadChangesUsingBinaryLogCDCInvalidCdcCursorPositionBehaviorEnum = typeof ReadChangesUsingBinaryLogCDCInvalidCdcCursorPositionBehaviorEnum[keyof typeof ReadChangesUsingBinaryLogCDCInvalidCdcCursorPositionBehaviorEnum];


