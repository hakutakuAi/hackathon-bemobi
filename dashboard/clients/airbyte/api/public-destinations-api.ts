/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DestinationCreateRequest } from '../model';
// @ts-ignore
import type { DestinationPatchRequest } from '../model';
// @ts-ignore
import type { DestinationPutRequest } from '../model';
// @ts-ignore
import type { DestinationResponse } from '../model';
// @ts-ignore
import type { DestinationsResponse } from '../model';
/**
 * PublicDestinationsApi - axios parameter creator
 * @export
 */
export const PublicDestinationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a destination given a name, workspace id, and a json blob containing the configuration for the source.
         * @summary Create a destination
         * @param {DestinationCreateRequest} [destinationCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDestination: async (destinationCreateRequest?: DestinationCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication clientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "clientCredentials", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(destinationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Destination
         * @param {string} destinationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDestination: async (destinationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('deleteDestination', 'destinationId', destinationId)
            const localVarPath = `/destinations/{destinationId}`
                .replace(`{${"destinationId"}}`, encodeURIComponent(String(destinationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication clientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "clientCredentials", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Destination details
         * @param {string} destinationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestination: async (destinationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('getDestination', 'destinationId', destinationId)
            const localVarPath = `/destinations/{destinationId}`
                .replace(`{${"destinationId"}}`, encodeURIComponent(String(destinationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication clientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "clientCredentials", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List destinations
         * @param {Array<string>} [workspaceIds] The UUIDs of the workspaces you wish to list destinations for. Empty list will retrieve all allowed workspaces.
         * @param {boolean} [includeDeleted] Include deleted destinations in the returned results.
         * @param {number} [limit] Set the limit on the number of destinations returned. The default is 20.
         * @param {number} [offset] Set the offset to start at when returning destinations. The default is 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDestinations: async (workspaceIds?: Array<string>, includeDeleted?: boolean, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication clientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "clientCredentials", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workspaceIds) {
                localVarQueryParameter['workspaceIds'] = workspaceIds;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['includeDeleted'] = includeDeleted;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Destination
         * @param {string} destinationId 
         * @param {DestinationPatchRequest} [destinationPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDestination: async (destinationId: string, destinationPatchRequest?: DestinationPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('patchDestination', 'destinationId', destinationId)
            const localVarPath = `/destinations/{destinationId}`
                .replace(`{${"destinationId"}}`, encodeURIComponent(String(destinationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication clientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "clientCredentials", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(destinationPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Destination and fully overwrite it
         * @param {string} destinationId 
         * @param {DestinationPutRequest} [destinationPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDestination: async (destinationId: string, destinationPutRequest?: DestinationPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'destinationId' is not null or undefined
            assertParamExists('putDestination', 'destinationId', destinationId)
            const localVarPath = `/destinations/{destinationId}`
                .replace(`{${"destinationId"}}`, encodeURIComponent(String(destinationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication clientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "clientCredentials", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(destinationPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicDestinationsApi - functional programming interface
 * @export
 */
export const PublicDestinationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicDestinationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a destination given a name, workspace id, and a json blob containing the configuration for the source.
         * @summary Create a destination
         * @param {DestinationCreateRequest} [destinationCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDestination(destinationCreateRequest?: DestinationCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestinationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDestination(destinationCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicDestinationsApi.createDestination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Destination
         * @param {string} destinationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDestination(destinationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDestination(destinationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicDestinationsApi.deleteDestination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Destination details
         * @param {string} destinationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDestination(destinationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestinationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDestination(destinationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicDestinationsApi.getDestination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List destinations
         * @param {Array<string>} [workspaceIds] The UUIDs of the workspaces you wish to list destinations for. Empty list will retrieve all allowed workspaces.
         * @param {boolean} [includeDeleted] Include deleted destinations in the returned results.
         * @param {number} [limit] Set the limit on the number of destinations returned. The default is 20.
         * @param {number} [offset] Set the offset to start at when returning destinations. The default is 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDestinations(workspaceIds?: Array<string>, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestinationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDestinations(workspaceIds, includeDeleted, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicDestinationsApi.listDestinations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Destination
         * @param {string} destinationId 
         * @param {DestinationPatchRequest} [destinationPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDestination(destinationId: string, destinationPatchRequest?: DestinationPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestinationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDestination(destinationId, destinationPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicDestinationsApi.patchDestination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a Destination and fully overwrite it
         * @param {string} destinationId 
         * @param {DestinationPutRequest} [destinationPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDestination(destinationId: string, destinationPutRequest?: DestinationPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestinationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putDestination(destinationId, destinationPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicDestinationsApi.putDestination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicDestinationsApi - factory interface
 * @export
 */
export const PublicDestinationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicDestinationsApiFp(configuration)
    return {
        /**
         * Creates a destination given a name, workspace id, and a json blob containing the configuration for the source.
         * @summary Create a destination
         * @param {PublicDestinationsApiCreateDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDestination(requestParameters: PublicDestinationsApiCreateDestinationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DestinationResponse> {
            return localVarFp.createDestination(requestParameters.destinationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Destination
         * @param {PublicDestinationsApiDeleteDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDestination(requestParameters: PublicDestinationsApiDeleteDestinationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDestination(requestParameters.destinationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Destination details
         * @param {PublicDestinationsApiGetDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestination(requestParameters: PublicDestinationsApiGetDestinationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DestinationResponse> {
            return localVarFp.getDestination(requestParameters.destinationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List destinations
         * @param {PublicDestinationsApiListDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDestinations(requestParameters: PublicDestinationsApiListDestinationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DestinationsResponse> {
            return localVarFp.listDestinations(requestParameters.workspaceIds, requestParameters.includeDeleted, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Destination
         * @param {PublicDestinationsApiPatchDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDestination(requestParameters: PublicDestinationsApiPatchDestinationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DestinationResponse> {
            return localVarFp.patchDestination(requestParameters.destinationId, requestParameters.destinationPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a Destination and fully overwrite it
         * @param {PublicDestinationsApiPutDestinationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDestination(requestParameters: PublicDestinationsApiPutDestinationRequest, options?: RawAxiosRequestConfig): AxiosPromise<DestinationResponse> {
            return localVarFp.putDestination(requestParameters.destinationId, requestParameters.destinationPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDestination operation in PublicDestinationsApi.
 * @export
 * @interface PublicDestinationsApiCreateDestinationRequest
 */
export interface PublicDestinationsApiCreateDestinationRequest {
    /**
     * 
     * @type {DestinationCreateRequest}
     * @memberof PublicDestinationsApiCreateDestination
     */
    readonly destinationCreateRequest?: DestinationCreateRequest
}

/**
 * Request parameters for deleteDestination operation in PublicDestinationsApi.
 * @export
 * @interface PublicDestinationsApiDeleteDestinationRequest
 */
export interface PublicDestinationsApiDeleteDestinationRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicDestinationsApiDeleteDestination
     */
    readonly destinationId: string
}

/**
 * Request parameters for getDestination operation in PublicDestinationsApi.
 * @export
 * @interface PublicDestinationsApiGetDestinationRequest
 */
export interface PublicDestinationsApiGetDestinationRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicDestinationsApiGetDestination
     */
    readonly destinationId: string
}

/**
 * Request parameters for listDestinations operation in PublicDestinationsApi.
 * @export
 * @interface PublicDestinationsApiListDestinationsRequest
 */
export interface PublicDestinationsApiListDestinationsRequest {
    /**
     * The UUIDs of the workspaces you wish to list destinations for. Empty list will retrieve all allowed workspaces.
     * @type {Array<string>}
     * @memberof PublicDestinationsApiListDestinations
     */
    readonly workspaceIds?: Array<string>

    /**
     * Include deleted destinations in the returned results.
     * @type {boolean}
     * @memberof PublicDestinationsApiListDestinations
     */
    readonly includeDeleted?: boolean

    /**
     * Set the limit on the number of destinations returned. The default is 20.
     * @type {number}
     * @memberof PublicDestinationsApiListDestinations
     */
    readonly limit?: number

    /**
     * Set the offset to start at when returning destinations. The default is 0
     * @type {number}
     * @memberof PublicDestinationsApiListDestinations
     */
    readonly offset?: number
}

/**
 * Request parameters for patchDestination operation in PublicDestinationsApi.
 * @export
 * @interface PublicDestinationsApiPatchDestinationRequest
 */
export interface PublicDestinationsApiPatchDestinationRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicDestinationsApiPatchDestination
     */
    readonly destinationId: string

    /**
     * 
     * @type {DestinationPatchRequest}
     * @memberof PublicDestinationsApiPatchDestination
     */
    readonly destinationPatchRequest?: DestinationPatchRequest
}

/**
 * Request parameters for putDestination operation in PublicDestinationsApi.
 * @export
 * @interface PublicDestinationsApiPutDestinationRequest
 */
export interface PublicDestinationsApiPutDestinationRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicDestinationsApiPutDestination
     */
    readonly destinationId: string

    /**
     * 
     * @type {DestinationPutRequest}
     * @memberof PublicDestinationsApiPutDestination
     */
    readonly destinationPutRequest?: DestinationPutRequest
}

/**
 * PublicDestinationsApi - object-oriented interface
 * @export
 * @class PublicDestinationsApi
 * @extends {BaseAPI}
 */
export class PublicDestinationsApi extends BaseAPI {
    /**
     * Creates a destination given a name, workspace id, and a json blob containing the configuration for the source.
     * @summary Create a destination
     * @param {PublicDestinationsApiCreateDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicDestinationsApi
     */
    public createDestination(requestParameters: PublicDestinationsApiCreateDestinationRequest = {}, options?: RawAxiosRequestConfig) {
        return PublicDestinationsApiFp(this.configuration).createDestination(requestParameters.destinationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Destination
     * @param {PublicDestinationsApiDeleteDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicDestinationsApi
     */
    public deleteDestination(requestParameters: PublicDestinationsApiDeleteDestinationRequest, options?: RawAxiosRequestConfig) {
        return PublicDestinationsApiFp(this.configuration).deleteDestination(requestParameters.destinationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Destination details
     * @param {PublicDestinationsApiGetDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicDestinationsApi
     */
    public getDestination(requestParameters: PublicDestinationsApiGetDestinationRequest, options?: RawAxiosRequestConfig) {
        return PublicDestinationsApiFp(this.configuration).getDestination(requestParameters.destinationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List destinations
     * @param {PublicDestinationsApiListDestinationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicDestinationsApi
     */
    public listDestinations(requestParameters: PublicDestinationsApiListDestinationsRequest = {}, options?: RawAxiosRequestConfig) {
        return PublicDestinationsApiFp(this.configuration).listDestinations(requestParameters.workspaceIds, requestParameters.includeDeleted, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Destination
     * @param {PublicDestinationsApiPatchDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicDestinationsApi
     */
    public patchDestination(requestParameters: PublicDestinationsApiPatchDestinationRequest, options?: RawAxiosRequestConfig) {
        return PublicDestinationsApiFp(this.configuration).patchDestination(requestParameters.destinationId, requestParameters.destinationPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a Destination and fully overwrite it
     * @param {PublicDestinationsApiPutDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicDestinationsApi
     */
    public putDestination(requestParameters: PublicDestinationsApiPutDestinationRequest, options?: RawAxiosRequestConfig) {
        return PublicDestinationsApiFp(this.configuration).putDestination(requestParameters.destinationId, requestParameters.destinationPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

