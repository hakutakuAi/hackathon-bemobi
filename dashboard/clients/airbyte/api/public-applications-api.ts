/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApplicationCreate } from '../model';
// @ts-ignore
import type { ApplicationRead } from '../model';
// @ts-ignore
import type { ApplicationReadList } from '../model';
// @ts-ignore
import type { ApplicationTokenRequestWithGrant } from '../model';
// @ts-ignore
import type { PublicAccessTokenResponse } from '../model';
/**
 * PublicApplicationsApi - axios parameter creator
 * @export
 */
export const PublicApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an Access Token
         * @param {ApplicationTokenRequestWithGrant} applicationTokenRequestWithGrant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken: async (applicationTokenRequestWithGrant: ApplicationTokenRequestWithGrant, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationTokenRequestWithGrant' is not null or undefined
            assertParamExists('createAccessToken', 'applicationTokenRequestWithGrant', applicationTokenRequestWithGrant)
            const localVarPath = `/applications/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationTokenRequestWithGrant, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an Application
         * @param {ApplicationCreate} applicationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication: async (applicationCreate: ApplicationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationCreate' is not null or undefined
            assertParamExists('createApplication', 'applicationCreate', applicationCreate)
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applicationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an Application
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication: async (applicationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('deleteApplication', 'applicationId', applicationId)
            const localVarPath = `/applications/{applicationId}`
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an Application detail
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication: async (applicationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getApplication', 'applicationId', applicationId)
            const localVarPath = `/applications/{applicationId}`
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApplicationsApi - functional programming interface
 * @export
 */
export const PublicApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get an Access Token
         * @param {ApplicationTokenRequestWithGrant} applicationTokenRequestWithGrant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccessToken(applicationTokenRequestWithGrant: ApplicationTokenRequestWithGrant, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicAccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccessToken(applicationTokenRequestWithGrant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApplicationsApi.createAccessToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create an Application
         * @param {ApplicationCreate} applicationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplication(applicationCreate: ApplicationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApplication(applicationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApplicationsApi.createApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an Application
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplication(applicationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplication(applicationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApplicationsApi.deleteApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get an Application detail
         * @param {string} applicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplication(applicationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplication(applicationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApplicationsApi.getApplication']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplications(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationReadList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApplications(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApplicationsApi.listApplications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicApplicationsApi - factory interface
 * @export
 */
export const PublicApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApplicationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get an Access Token
         * @param {PublicApplicationsApiCreateAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(requestParameters: PublicApplicationsApiCreateAccessTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicAccessTokenResponse> {
            return localVarFp.createAccessToken(requestParameters.applicationTokenRequestWithGrant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an Application
         * @param {PublicApplicationsApiCreateApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(requestParameters: PublicApplicationsApiCreateApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationRead> {
            return localVarFp.createApplication(requestParameters.applicationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an Application
         * @param {PublicApplicationsApiDeleteApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(requestParameters: PublicApplicationsApiDeleteApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationRead> {
            return localVarFp.deleteApplication(requestParameters.applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an Application detail
         * @param {PublicApplicationsApiGetApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication(requestParameters: PublicApplicationsApiGetApplicationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApplicationRead> {
            return localVarFp.getApplication(requestParameters.applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(options?: RawAxiosRequestConfig): AxiosPromise<ApplicationReadList> {
            return localVarFp.listApplications(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccessToken operation in PublicApplicationsApi.
 * @export
 * @interface PublicApplicationsApiCreateAccessTokenRequest
 */
export interface PublicApplicationsApiCreateAccessTokenRequest {
    /**
     * 
     * @type {ApplicationTokenRequestWithGrant}
     * @memberof PublicApplicationsApiCreateAccessToken
     */
    readonly applicationTokenRequestWithGrant: ApplicationTokenRequestWithGrant
}

/**
 * Request parameters for createApplication operation in PublicApplicationsApi.
 * @export
 * @interface PublicApplicationsApiCreateApplicationRequest
 */
export interface PublicApplicationsApiCreateApplicationRequest {
    /**
     * 
     * @type {ApplicationCreate}
     * @memberof PublicApplicationsApiCreateApplication
     */
    readonly applicationCreate: ApplicationCreate
}

/**
 * Request parameters for deleteApplication operation in PublicApplicationsApi.
 * @export
 * @interface PublicApplicationsApiDeleteApplicationRequest
 */
export interface PublicApplicationsApiDeleteApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicApplicationsApiDeleteApplication
     */
    readonly applicationId: string
}

/**
 * Request parameters for getApplication operation in PublicApplicationsApi.
 * @export
 * @interface PublicApplicationsApiGetApplicationRequest
 */
export interface PublicApplicationsApiGetApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicApplicationsApiGetApplication
     */
    readonly applicationId: string
}

/**
 * PublicApplicationsApi - object-oriented interface
 * @export
 * @class PublicApplicationsApi
 * @extends {BaseAPI}
 */
export class PublicApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Get an Access Token
     * @param {PublicApplicationsApiCreateAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApplicationsApi
     */
    public createAccessToken(requestParameters: PublicApplicationsApiCreateAccessTokenRequest, options?: RawAxiosRequestConfig) {
        return PublicApplicationsApiFp(this.configuration).createAccessToken(requestParameters.applicationTokenRequestWithGrant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an Application
     * @param {PublicApplicationsApiCreateApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApplicationsApi
     */
    public createApplication(requestParameters: PublicApplicationsApiCreateApplicationRequest, options?: RawAxiosRequestConfig) {
        return PublicApplicationsApiFp(this.configuration).createApplication(requestParameters.applicationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an Application
     * @param {PublicApplicationsApiDeleteApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApplicationsApi
     */
    public deleteApplication(requestParameters: PublicApplicationsApiDeleteApplicationRequest, options?: RawAxiosRequestConfig) {
        return PublicApplicationsApiFp(this.configuration).deleteApplication(requestParameters.applicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an Application detail
     * @param {PublicApplicationsApiGetApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApplicationsApi
     */
    public getApplication(requestParameters: PublicApplicationsApiGetApplicationRequest, options?: RawAxiosRequestConfig) {
        return PublicApplicationsApiFp(this.configuration).getApplication(requestParameters.applicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApplicationsApi
     */
    public listApplications(options?: RawAxiosRequestConfig) {
        return PublicApplicationsApiFp(this.configuration).listApplications(options).then((request) => request(this.axios, this.basePath));
    }
}

