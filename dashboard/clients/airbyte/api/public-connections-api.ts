/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConnectionCreateRequest } from '../model';
// @ts-ignore
import type { ConnectionPatchRequest } from '../model';
// @ts-ignore
import type { ConnectionResponse } from '../model';
// @ts-ignore
import type { ConnectionsResponse } from '../model';
/**
 * PublicConnectionsApi - axios parameter creator
 * @export
 */
export const PublicConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a connection
         * @param {ConnectionCreateRequest} connectionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnection: async (connectionCreateRequest: ConnectionCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionCreateRequest' is not null or undefined
            assertParamExists('createConnection', 'connectionCreateRequest', connectionCreateRequest)
            const localVarPath = `/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Connection
         * @param {string} connectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnection: async (connectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('deleteConnection', 'connectionId', connectionId)
            const localVarPath = `/connections/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Connection details
         * @param {string} connectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnection: async (connectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('getConnection', 'connectionId', connectionId)
            const localVarPath = `/connections/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List connections
         * @param {Array<string>} [workspaceIds] The UUIDs of the workspaces you wish to list connections for. Empty list will retrieve all allowed workspaces.
         * @param {boolean} [includeDeleted] Include deleted connections in the returned results.
         * @param {number} [limit] Set the limit on the number of Connections returned. The default is 20.
         * @param {number} [offset] Set the offset to start at when returning Connections. The default is 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConnections: async (workspaceIds?: Array<string>, includeDeleted?: boolean, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceIds) {
                localVarQueryParameter['workspaceIds'] = workspaceIds;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['includeDeleted'] = includeDeleted;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Connection details
         * @param {string} connectionId 
         * @param {ConnectionPatchRequest} connectionPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConnection: async (connectionId: string, connectionPatchRequest: ConnectionPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('patchConnection', 'connectionId', connectionId)
            // verify required parameter 'connectionPatchRequest' is not null or undefined
            assertParamExists('patchConnection', 'connectionPatchRequest', connectionPatchRequest)
            const localVarPath = `/connections/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectionPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicConnectionsApi - functional programming interface
 * @export
 */
export const PublicConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a connection
         * @param {ConnectionCreateRequest} connectionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConnection(connectionCreateRequest: ConnectionCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConnection(connectionCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicConnectionsApi.createConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a Connection
         * @param {string} connectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConnection(connectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConnection(connectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicConnectionsApi.deleteConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Connection details
         * @param {string} connectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnection(connectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnection(connectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicConnectionsApi.getConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List connections
         * @param {Array<string>} [workspaceIds] The UUIDs of the workspaces you wish to list connections for. Empty list will retrieve all allowed workspaces.
         * @param {boolean} [includeDeleted] Include deleted connections in the returned results.
         * @param {number} [limit] Set the limit on the number of Connections returned. The default is 20.
         * @param {number} [offset] Set the offset to start at when returning Connections. The default is 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConnections(workspaceIds?: Array<string>, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConnections(workspaceIds, includeDeleted, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicConnectionsApi.listConnections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Connection details
         * @param {string} connectionId 
         * @param {ConnectionPatchRequest} connectionPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchConnection(connectionId: string, connectionPatchRequest: ConnectionPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchConnection(connectionId, connectionPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicConnectionsApi.patchConnection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicConnectionsApi - factory interface
 * @export
 */
export const PublicConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicConnectionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a connection
         * @param {PublicConnectionsApiCreateConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnection(requestParameters: PublicConnectionsApiCreateConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectionResponse> {
            return localVarFp.createConnection(requestParameters.connectionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Connection
         * @param {PublicConnectionsApiDeleteConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnection(requestParameters: PublicConnectionsApiDeleteConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteConnection(requestParameters.connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Connection details
         * @param {PublicConnectionsApiGetConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnection(requestParameters: PublicConnectionsApiGetConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectionResponse> {
            return localVarFp.getConnection(requestParameters.connectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List connections
         * @param {PublicConnectionsApiListConnectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConnections(requestParameters: PublicConnectionsApiListConnectionsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ConnectionsResponse> {
            return localVarFp.listConnections(requestParameters.workspaceIds, requestParameters.includeDeleted, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Connection details
         * @param {PublicConnectionsApiPatchConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConnection(requestParameters: PublicConnectionsApiPatchConnectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectionResponse> {
            return localVarFp.patchConnection(requestParameters.connectionId, requestParameters.connectionPatchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConnection operation in PublicConnectionsApi.
 * @export
 * @interface PublicConnectionsApiCreateConnectionRequest
 */
export interface PublicConnectionsApiCreateConnectionRequest {
    /**
     * 
     * @type {ConnectionCreateRequest}
     * @memberof PublicConnectionsApiCreateConnection
     */
    readonly connectionCreateRequest: ConnectionCreateRequest
}

/**
 * Request parameters for deleteConnection operation in PublicConnectionsApi.
 * @export
 * @interface PublicConnectionsApiDeleteConnectionRequest
 */
export interface PublicConnectionsApiDeleteConnectionRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicConnectionsApiDeleteConnection
     */
    readonly connectionId: string
}

/**
 * Request parameters for getConnection operation in PublicConnectionsApi.
 * @export
 * @interface PublicConnectionsApiGetConnectionRequest
 */
export interface PublicConnectionsApiGetConnectionRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicConnectionsApiGetConnection
     */
    readonly connectionId: string
}

/**
 * Request parameters for listConnections operation in PublicConnectionsApi.
 * @export
 * @interface PublicConnectionsApiListConnectionsRequest
 */
export interface PublicConnectionsApiListConnectionsRequest {
    /**
     * The UUIDs of the workspaces you wish to list connections for. Empty list will retrieve all allowed workspaces.
     * @type {Array<string>}
     * @memberof PublicConnectionsApiListConnections
     */
    readonly workspaceIds?: Array<string>

    /**
     * Include deleted connections in the returned results.
     * @type {boolean}
     * @memberof PublicConnectionsApiListConnections
     */
    readonly includeDeleted?: boolean

    /**
     * Set the limit on the number of Connections returned. The default is 20.
     * @type {number}
     * @memberof PublicConnectionsApiListConnections
     */
    readonly limit?: number

    /**
     * Set the offset to start at when returning Connections. The default is 0
     * @type {number}
     * @memberof PublicConnectionsApiListConnections
     */
    readonly offset?: number
}

/**
 * Request parameters for patchConnection operation in PublicConnectionsApi.
 * @export
 * @interface PublicConnectionsApiPatchConnectionRequest
 */
export interface PublicConnectionsApiPatchConnectionRequest {
    /**
     * 
     * @type {string}
     * @memberof PublicConnectionsApiPatchConnection
     */
    readonly connectionId: string

    /**
     * 
     * @type {ConnectionPatchRequest}
     * @memberof PublicConnectionsApiPatchConnection
     */
    readonly connectionPatchRequest: ConnectionPatchRequest
}

/**
 * PublicConnectionsApi - object-oriented interface
 * @export
 * @class PublicConnectionsApi
 * @extends {BaseAPI}
 */
export class PublicConnectionsApi extends BaseAPI {
    /**
     * 
     * @summary Create a connection
     * @param {PublicConnectionsApiCreateConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicConnectionsApi
     */
    public createConnection(requestParameters: PublicConnectionsApiCreateConnectionRequest, options?: RawAxiosRequestConfig) {
        return PublicConnectionsApiFp(this.configuration).createConnection(requestParameters.connectionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Connection
     * @param {PublicConnectionsApiDeleteConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicConnectionsApi
     */
    public deleteConnection(requestParameters: PublicConnectionsApiDeleteConnectionRequest, options?: RawAxiosRequestConfig) {
        return PublicConnectionsApiFp(this.configuration).deleteConnection(requestParameters.connectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Connection details
     * @param {PublicConnectionsApiGetConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicConnectionsApi
     */
    public getConnection(requestParameters: PublicConnectionsApiGetConnectionRequest, options?: RawAxiosRequestConfig) {
        return PublicConnectionsApiFp(this.configuration).getConnection(requestParameters.connectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List connections
     * @param {PublicConnectionsApiListConnectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicConnectionsApi
     */
    public listConnections(requestParameters: PublicConnectionsApiListConnectionsRequest = {}, options?: RawAxiosRequestConfig) {
        return PublicConnectionsApiFp(this.configuration).listConnections(requestParameters.workspaceIds, requestParameters.includeDeleted, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Connection details
     * @param {PublicConnectionsApiPatchConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicConnectionsApi
     */
    public patchConnection(requestParameters: PublicConnectionsApiPatchConnectionRequest, options?: RawAxiosRequestConfig) {
        return PublicConnectionsApiFp(this.configuration).patchConnection(requestParameters.connectionId, requestParameters.connectionPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

