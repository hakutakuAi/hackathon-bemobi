/* tslint:disable */
/* eslint-disable */
/**
 * airbyte-api
 * Programatically control Airbyte Cloud, OSS & Enterprise.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { OrganizationsResponse } from '../model';
/**
 * PublicOrganizationsApi - axios parameter creator
 * @export
 */
export const PublicOrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists users organizations.
         * @summary List all organizations for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsForUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication clientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "clientCredentials", [], configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicOrganizationsApi - functional programming interface
 * @export
 */
export const PublicOrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicOrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists users organizations.
         * @summary List all organizations for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationsForUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationsForUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicOrganizationsApi.listOrganizationsForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicOrganizationsApi - factory interface
 * @export
 */
export const PublicOrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicOrganizationsApiFp(configuration)
    return {
        /**
         * Lists users organizations.
         * @summary List all organizations for a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationsForUser(options?: RawAxiosRequestConfig): AxiosPromise<OrganizationsResponse> {
            return localVarFp.listOrganizationsForUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicOrganizationsApi - object-oriented interface
 * @export
 * @class PublicOrganizationsApi
 * @extends {BaseAPI}
 */
export class PublicOrganizationsApi extends BaseAPI {
    /**
     * Lists users organizations.
     * @summary List all organizations for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicOrganizationsApi
     */
    public listOrganizationsForUser(options?: RawAxiosRequestConfig) {
        return PublicOrganizationsApiFp(this.configuration).listOrganizationsForUser(options).then((request) => request(this.axios, this.basePath));
    }
}

